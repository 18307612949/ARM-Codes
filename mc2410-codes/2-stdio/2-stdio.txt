
========================================================================

** ELF Header Information

    File Name: 2-stdio.axf

    Machine class: ELFCLASS32 (32-bit)
    Data encoding: ELFDATA2LSB (Little endian)
    Header version: EV_CURRENT (Current version)
    File Type: ET_EXEC (Executable) (2)
    Machine: EM_ARM (ARM)

    Image Entry point: 0x00000000
    Flags: EF_ARM_HASENTRY + EF_ARM_SYMSARESORTED + EF_ARM_MAPSYMSFIRST (0x02000016)

    EABI conformance : ARM EABI Version 2.

    Built with
    ARM C Compiler, ADS1.2 [Build 805]
    ARM/Thumb Macro Assembler vsn ADS1.2 [Build 805]
    ARM Linker, ADS1.2 [Build 805] 

    Header size: 52 bytes (0x34)
    Program header entry size: 32 bytes (0x20)
    Section header entry size: 40 bytes (0x28)

    Program header entries: 1
    Section header entries: 8

    Program header offset: 1608 (0x00000648)
    Section header offset: 1640 (0x00000668)

    Section header string table index: 7

========================================================================

** Program header #0 (PT_LOAD) [PF_X + PF_R + PF_ARM_ENTRY]
    Size : 408 bytes
    Virtual address: 0x00000000


========================================================================

** Section #1 'ER_RO' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 408 bytes (alignment 4)

    $a
    uartdemo
        0x00000000:    e3a0dd40    @...    MOV      r13,#0x1000
        0x00000004:    ea000008    ....    B        mymain  ; 0x2c
    sys_init
    .text
        0x00000008:    e3a00000    ....    MOV      r0,#0
        0x0000000c:    e3a01453    S...    MOV      r1,#0x53000000
        0x00000010:    e5810000    ....    STR      r0,[r1,#0]
        0x00000014:    e3a01003    ....    MOV      r1,#3
        0x00000018:    e3a0044c    L...    MOV      r0,#0x4c000000
        0x0000001c:    e5801014    ....    STR      r1,[r0,#0x14]
        0x00000020:    e59f1040    @...    LDR      r1,0x68
        0x00000024:    e5801004    ....    STR      r1,[r0,#4]
        0x00000028:    e1a0f00e    ....    MOV      pc,r14
    mymain
        0x0000002c:    e52de004    ..-.    STR      r14,[r13,#-4]!
        0x00000030:    e24dd064    d.M.    SUB      r13,r13,#0x64
        0x00000034:    ebfffff3    ....    BL       sys_init  ; 0x8
        0x00000038:    eb000015    ....    BL       uart_init  ; 0x94
        0x0000003c:    e28f0028    (...    ADD      r0,pc,#0x28 ; #0x6c
        0x00000040:    ea000006    ....    B        0x60
        0x00000044:    e28f003c    <...    ADD      r0,pc,#0x3c ; #0x88
        0x00000048:    eb000029    )...    BL       puts  ; 0xf4
        0x0000004c:    e1a0000d    ....    MOV      r0,r13
        0x00000050:    eb000035    5...    BL       gets  ; 0x12c
        0x00000054:    e1a0000d    ....    MOV      r0,r13
        0x00000058:    eb000025    %...    BL       puts  ; 0xf4
        0x0000005c:    e28f002c    ,...    ADD      r0,pc,#0x2c ; #0x90
        0x00000060:    eb000023    #...    BL       puts  ; 0xf4
        0x00000064:    eafffff6    ....    B        0x44
    $d
        0x00000068:    0005c040    @...    DCD    376896
        0x0000006c:    65770a0a    ..we    DCD    1702300170
        0x00000070:    6d6f636c    lcom    DCD    1836016492
        0x00000074:    6f742065    e to    DCD    1869881445
        0x00000078:    20796d20     my     DCD    544828704
        0x0000007c:    746f6f62    boot    DCD    1953460066
        0x00000080:    2e317620     v1.    DCD    774993440
        0x00000084:    000a2030    0 ..    DCD    663600
        0x00000088:    73626f4a    Jobs    DCD    1935830858
        0x0000008c:    00202420     $ .    DCD    2106400
        0x00000090:    0000000a    ....    DCD    10
    uart_init
    $a
    .text
        0x00000094:    e3a000a0    ....    MOV      r0,#0xa0
        0x00000098:    e3a01456    V...    MOV      r1,#0x56000000
        0x0000009c:    e5810070    p...    STR      r0,[r1,#0x70]
        0x000000a0:    e3a01005    ....    MOV      r1,#5
        0x000000a4:    e3a00450    P...    MOV      r0,#0x50000000
        0x000000a8:    e5801004    ....    STR      r1,[r0,#4]
        0x000000ac:    e3a0101a    ....    MOV      r1,#0x1a
        0x000000b0:    e5801028    (...    STR      r1,[r0,#0x28]
        0x000000b4:    e3a01003    ....    MOV      r1,#3
        0x000000b8:    e5801000    ....    STR      r1,[r0,#0]
        0x000000bc:    e1a0f00e    ....    MOV      pc,r14
    uart_putchar
        0x000000c0:    e3a02450    P$..    MOV      r2,#0x50000000
        0x000000c4:    e5921010    ....    LDR      r1,[r2,#0x10]
        0x000000c8:    e3110004    ....    TST      r1,#4
        0x000000cc:    0afffffc    ....    BEQ      0xc4
        0x000000d0:    e5820020     ...    STR      r0,[r2,#0x20]
        0x000000d4:    e1a0f00e    ....    MOV      pc,r14
    uart_getchar
        0x000000d8:    e3a01450    P...    MOV      r1,#0x50000000
        0x000000dc:    e5910010    ....    LDR      r0,[r1,#0x10]
        0x000000e0:    e3100001    ....    TST      r0,#1
        0x000000e4:    0afffffc    ....    BEQ      0xdc
        0x000000e8:    e5910024    $...    LDR      r0,[r1,#0x24]
        0x000000ec:    e20000ff    ....    AND      r0,r0,#0xff
        0x000000f0:    e1a0f00e    ....    MOV      pc,r14
    puts
    .text
        0x000000f4:    e92d4010    .@-.    STMFD    r13!,{r4,r14}
        0x000000f8:    e1a04000    .@..    MOV      r4,r0
        0x000000fc:    ea000005    ....    B        0x118
        0x00000100:    e350000a    ..P.    CMP      r0,#0xa
        0x00000104:    03a0000d    ....    MOVEQ    r0,#0xd
        0x00000108:    0bffffec    ....    BLEQ     uart_putchar  ; 0xc0
        0x0000010c:    e5d40000    ....    LDRB     r0,[r4,#0]
        0x00000110:    ebffffea    ....    BL       uart_putchar  ; 0xc0
        0x00000114:    e2844001    .@..    ADD      r4,r4,#1
        0x00000118:    e5d40000    ....    LDRB     r0,[r4,#0]
        0x0000011c:    e3500000    ..P.    CMP      r0,#0
        0x00000120:    1afffff6    ....    BNE      0x100
        0x00000124:    e3a00000    ....    MOV      r0,#0
        0x00000128:    e8bd8010    ....    LDMFD    r13!,{r4,pc}
    gets
        0x0000012c:    e92d4038    8@-.    STMFD    r13!,{r3-r5,r14}
        0x00000130:    e1a05000    .P..    MOV      r5,r0
        0x00000134:    e1a04000    .@..    MOV      r4,r0
        0x00000138:    ebffffe6    ....    BL       uart_getchar  ; 0xd8
        0x0000013c:    e350000d    ..P.    CMP      r0,#0xd
        0x00000140:    0a00000c    ....    BEQ      0x178
        0x00000144:    e3500008    ..P.    CMP      r0,#8
        0x00000148:    14c40001    ....    STRNEB   r0,[r4],#1
        0x0000014c:    1a000007    ....    BNE      0x170
        0x00000150:    e1540005    ..T.    CMP      r4,r5
        0x00000154:    9afffff7    ....    BLS      0x138
        0x00000158:    e2444001    .@D.    SUB      r4,r4,#1
        0x0000015c:    e3a00008    ....    MOV      r0,#8
        0x00000160:    ebffffd6    ....    BL       uart_putchar  ; 0xc0
        0x00000164:    e3a00020     ...    MOV      r0,#0x20
        0x00000168:    ebffffd4    ....    BL       uart_putchar  ; 0xc0
        0x0000016c:    e3a00008    ....    MOV      r0,#8
        0x00000170:    ebffffd2    ....    BL       uart_putchar  ; 0xc0
        0x00000174:    eaffffef    ....    B        0x138
        0x00000178:    e3a00000    ....    MOV      r0,#0
        0x0000017c:    e5c40000    ....    STRB     r0,[r4,#0]
        0x00000180:    e3a0000d    ....    MOV      r0,#0xd
        0x00000184:    ebffffcd    ....    BL       uart_putchar  ; 0xc0
        0x00000188:    e3a0000a    ....    MOV      r0,#0xa
        0x0000018c:    ebffffcb    ....    BL       uart_putchar  ; 0xc0
        0x00000190:    e1a00004    ....    MOV      r0,r4
        0x00000194:    e8bd8038    8...    LDMFD    r13!,{r3-r5,pc}

** Section #2 '.debug_frame' (SHT_PROGBITS)
    Size   : 284 bytes


** Section #3 '.symtab' (SHT_SYMTAB)
    Size   : 336 bytes (alignment 4)
    String table '.strtab'
    Last local symbol no. 12


** Section #4 '.strtab' (SHT_STRTAB)
    Size   : 204 bytes


** Section #5 '.note' (SHT_NOTE)
    Size   : 20 bytes (alignment 4)


** Section #6 '.comment' (SHT_PROGBITS)
    Size   : 220 bytes


** Section #7 '.shstrtab' (SHT_STRTAB)
    Size   : 84 bytes


